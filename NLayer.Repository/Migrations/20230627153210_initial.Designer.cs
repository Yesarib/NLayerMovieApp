// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NLayer.Repository;

#nullable disable

namespace NLayer.Repository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230627153210_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CategoryMovies", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("MoviesId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("CategoryMovies");
                });

            modelBuilder.Entity("NLayer.Core.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Macera"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bilim Kurgu"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Aksiyon"
                        });
                });

            modelBuilder.Entity("NLayer.Core.MovieFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ImdbRating")
                        .HasColumnType("int");

                    b.Property<int>("MoviesId")
                        .HasColumnType("int");

                    b.Property<string>("Overview")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MoviesId")
                        .IsUnique();

                    b.ToTable("MovieFeatures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImdbRating = 8,
                            MoviesId = 1,
                            Overview = "Uzun Bir Açıklama",
                            Year = 2012
                        },
                        new
                        {
                            Id = 2,
                            ImdbRating = 9,
                            MoviesId = 2,
                            Overview = "Uzun Bir Açıklama 2",
                            Year = 2014
                        },
                        new
                        {
                            Id = 3,
                            ImdbRating = 7,
                            MoviesId = 3,
                            Overview = "Uzun Bir Açıklama 3",
                            Year = 2014
                        },
                        new
                        {
                            Id = 4,
                            ImdbRating = 8,
                            MoviesId = 4,
                            Overview = "Uzun Bir Açıklama 4",
                            Year = 2019
                        },
                        new
                        {
                            Id = 5,
                            ImdbRating = 7,
                            MoviesId = 5,
                            Overview = "Uzun Bir Açıklama 5",
                            Year = 2015
                        });
                });

            modelBuilder.Entity("NLayer.Core.Movies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2023, 6, 27, 18, 32, 10, 74, DateTimeKind.Local).AddTicks(2122),
                            Title = "Jumanji"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2023, 6, 27, 18, 32, 10, 74, DateTimeKind.Local).AddTicks(2132),
                            Title = "Interstellar"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2023, 6, 27, 18, 32, 10, 74, DateTimeKind.Local).AddTicks(2133),
                            Title = "The Martian"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2023, 6, 27, 18, 32, 10, 74, DateTimeKind.Local).AddTicks(2134),
                            Title = "Pacific Rim"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2023, 6, 27, 18, 32, 10, 74, DateTimeKind.Local).AddTicks(2135),
                            Title = "Hitman's Bodyguard"
                        });
                });

            modelBuilder.Entity("CategoryMovies", b =>
                {
                    b.HasOne("NLayer.Core.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NLayer.Core.Movies", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NLayer.Core.MovieFeature", b =>
                {
                    b.HasOne("NLayer.Core.Movies", "Movie")
                        .WithOne("MovieFeature")
                        .HasForeignKey("NLayer.Core.MovieFeature", "MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("NLayer.Core.Movies", b =>
                {
                    b.Navigation("MovieFeature");
                });
#pragma warning restore 612, 618
        }
    }
}
